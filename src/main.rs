mod config;
mod vk_api;
mod pin;
mod password;

use config::{BotConfig, save_config_secure, load_config_secure, config_exists, delete_config};
use pin::input_pin;
use password::input_password;
use vk_api::*;
use std::{io::{self, Write}};
use reqwest::Client;
use tokio::time::{sleep, Duration};
use std::collections::HashSet;
use rand::Rng;
use rpassword::read_password_from_tty;

fn prompt_manual() -> BotConfig {
    print!("–í–≤–µ–¥–∏—Ç–µ VK_TOKEN: ");
    io::stdout().flush().unwrap();
    let token = read_password_from_tty(Some("|")).unwrap();

    print!("–í–≤–µ–¥–∏—Ç–µ USER_ID: ");
    io::stdout().flush().unwrap();
    let user_id = read_password_from_tty(Some("|")).unwrap();

    BotConfig {
        vk_token: token.trim().to_string(),
        user_id: user_id.trim().parse().expect("–û—à–∏–±–∫–∞ USER_ID"),
    }
}

fn prompt_url() -> BotConfig {
    println!("–í—Å—Ç–∞–≤—å—Ç–µ URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VK:");
    let mut url = String::new();
    io::stdin().read_line(&mut url).unwrap();
    let url = url.trim();
    let hash_part = url.split('#').nth(1).unwrap_or("");
    let mut token = None;
    let mut user_id = None;
    for param in hash_part.split('&') {
        let mut kv = param.splitn(2, '=');
        match (kv.next(), kv.next()) {
            (Some("access_token"), Some(val)) => token = Some(val.to_string()),
            (Some("user_id"), Some(val)) => user_id = Some(val.to_string()),
            _ => {}
        }
    }

    let token = token.unwrap_or_else(|| {
        print!("–í–≤–µ–¥–∏—Ç–µ VK_TOKEN: ");
        io::stdout().flush().unwrap();
        read_password_from_tty(Some("|")).unwrap()
    });

    let user_id = user_id.unwrap_or_else(|| {
        print!("–í–≤–µ–¥–∏—Ç–µ USER_ID: ");
        io::stdout().flush().unwrap();
        read_password_from_tty(Some("|")).unwrap()
    });

    BotConfig {
        vk_token: token.trim().to_string(),
        user_id: user_id.trim().parse().expect("–û—à–∏–±–∫–∞ USER_ID"),
    }
}

fn prompt_menu() -> BotConfig {
    println!("1. –ê–≤—Ç–æ: –í—Å—Ç–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VK");
    println!("2. –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é VK_TOKEN –∏ USER_ID");
    print!("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± (1/2): ");
    io::stdout().flush().unwrap();
    let mut choice = String::new();
    io::stdin().read_line(&mut choice).unwrap();
    match choice.trim() {
        "1" => prompt_url(),
        "2" => prompt_manual(),
        _ => {
            println!("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.");
            prompt_menu()
        }
    }
}

fn ask_reset() -> bool {
    println!("–•–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏ PIN-–∫–æ–¥? (y/n): ");
    let mut ans = String::new();
    io::stdin().read_line(&mut ans).unwrap();
    ans.trim().eq_ignore_ascii_case("y")
}

async fn bot_run(cfg: BotConfig) -> Result<(), String> {
    let client = Client::new();
    let mut invited: HashSet<u64> = HashSet::new();
    let mut last_msg_id = 0;
    let delay_min = 8;
    let delay_max = 30;
    let mut rng = rand::thread_rng();

    println!("üîÅ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã !invite...");

    loop {
        let dialogs = get_conversations(&client, &cfg.vk_token).await.map_err(|e| e.to_string())?;
        for d in dialogs {
            if d.last_message.text.trim().to_lowercase() == "!invite"
                && d.last_message.from_id == cfg.user_id as i64
                && d.last_message.id != last_msg_id
            {
                last_msg_id = d.last_message.id;
                let chat_id = (d.last_message.peer_id - 2000000000) as u64;
                println!("üì• –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞! –ß–∞—Ç: {}", chat_id);

                let friends = get_friends(&client, &cfg.vk_token).await.map_err(|e| e.to_string())?;
                println!("üë• –î—Ä—É–∑–µ–π –Ω–∞–π–¥–µ–Ω–æ: {}", friends.len());

                for user_id in friends {
                    if !invited.contains(&user_id) {
                        let delay = rng.gen_range(delay_min..=delay_max);
                        sleep(Duration::from_millis(delay)).await;
                        add_user_to_chat(&client, &cfg.vk_token, chat_id, user_id).await;
                        invited.insert(user_id);
                    }
                }
                println!("‚úÖ –í—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.");
            }
        }
        sleep(Duration::from_secs(2)).await;
    }
}

#[tokio::main]
async fn main() {
    let mut fail_count = 0;
    let mut config: Option<BotConfig> = None;

    if config_exists() {
        loop {
            use rpassword::read_password;

            print!("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
            io::stdout().flush().unwrap();
            let password = read_password().unwrap();

            print!("–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥: ");
            io::stdout().flush().unwrap();
            let pin = read_password().unwrap();

            match load_config_secure(password.trim(), pin.trim()) {
                Ok(cfg) => {
                    config = Some(cfg);
                    break;
                }
                Err(_) => {
                    fail_count += 1;
                    if fail_count >= 5 {
                        println!("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.");
                        delete_config();
                        config = Some(prompt_menu());
                        let password = input_password("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: ", &config.as_ref().unwrap().vk_token, &config.as_ref().unwrap().user_id.to_string());
                        let pin = input_pin("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ PIN-–∫–æ–¥: ");
                        save_config_secure(config.as_ref().unwrap(), &password, &pin).expect("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
                        break;
                    } else if fail_count >= 2 {
                        println!("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ PIN. –ü–æ–ø—ã—Ç–∫–∞ {}/5.", fail_count);
                        if ask_reset() {
                            delete_config();
                            config = Some(prompt_menu());
                            let password = input_password("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: ", &config.as_ref().unwrap().vk_token, &config.as_ref().unwrap().user_id.to_string());
                            let pin = input_pin("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ PIN-–∫–æ–¥: ");
                            save_config_secure(config.as_ref().unwrap(), &password, &pin).expect("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
                            break;
                        }
                    } else {
                        println!("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ PIN. –ü–æ–ø—ã—Ç–∫–∞ {}/5.", fail_count);
                    }
                }
            }
        }
    } else {
        config = Some(prompt_menu());
        let password = input_password("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: ", &config.as_ref().unwrap().vk_token, &config.as_ref().unwrap().user_id.to_string());
        let pin = input_pin("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ PIN-–∫–æ–¥: ");
        save_config_secure(config.as_ref().unwrap(), &password, &pin).expect("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
    }

    if let Some(cfg) = config {
        if let Err(e) = bot_run(cfg).await {
            println!("‚ÄºÔ∏è –û—à–∏–±–∫–∞: {}", e);
            std::fs::write("last_error.log", e).ok();
        }
    }
}